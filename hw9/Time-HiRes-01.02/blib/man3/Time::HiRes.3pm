.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HiRes 3pm"
.TH HiRes 3pm "1996-12-30" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Time::HiRes \- Perl extension for ualarm, usleep, and gettimeofday
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Time::HiRes;
\&
\&  Time::HiRes::usleep ($microseconds);
\&
\&  Time::HiRes::ualarm ($microseconds, $interval_microseconds);
\&
\&  $t0 = [Time::HiRes::gettimeofday];
\&  ($seconds, $microseconds) = Time::HiRes::gettimeofday;
\&
\&  $elapsed = Time::HiRes::tv_interval ( $t0, [$seconds, $microseconds]);
\&  $elapsed = Time::HiRes::tv_interval ( $t0, [Time::HiRes::gettimeofday]);
\&  $elapsed = Time::HiRes::tv_interval ( $t0 );
\&
\&  $now_fractions = Time::HiRes::time;
\&
\&  Time::HiRes::sleep ($floating_seconds);
\&
\&  Time::HiRes::alarm ($floating_seconds);
\&  Time::HiRes::alarm ($floating_seconds, $floating_interval);
\& 
\&  use Time::HiRes qw ( time alarm sleep );
\&  $now_fractions = time;
\&  sleep ($floating_seconds);
\&  alarm ($floating_seconds);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Time::HiRes\*(C'\fR package implements a Perl interface to usleep, ualarm,
and gettimeofday system calls. See the \s-1EXAMPLES\s0 section below and the test
scripts for usage; see your system documentation for the description of
the underlying gettimeofday, usleep, and ualarm calls.
.PP
Note that if your system does not implement \fIusleep()\fR, \fIualarm()\fR, and
\&\fIgettimeofday()\fR, you will not be able to use this module. If you are in 
this situation, see \s-1MISSING \fIUALARM\s0()\fR \s-1AND FRIENDS\s0 below.
.IP "gettimeofday" 4
.IX Item "gettimeofday"
Returns a 2 element array with the second and microseconds since the epoch.
.ie n .IP "usleep ( $useconds )" 4
.el .IP "usleep ( \f(CW$useconds\fR )" 4
.IX Item "usleep ( $useconds )"
Issues a usleep for the # of microseconds specified. See also 
Time::HiRes::sleep.
.ie n .IP "ualarm ( $useconds [, $interval_useconds ] )" 4
.el .IP "ualarm ( \f(CW$useconds\fR [, \f(CW$interval_useconds\fR ] )" 4
.IX Item "ualarm ( $useconds [, $interval_useconds ] )"
Issues a ualarm call; interval_useconds is optional and will be 0 if 
unspecified, resulting in alarm-like behaviour.
.ie n .IP "tv_interval ( $ref_to_gettimeofday [, $ref_to_later_gettimeofday] )" 4
.el .IP "tv_interval ( \f(CW$ref_to_gettimeofday\fR [, \f(CW$ref_to_later_gettimeofday\fR] )" 4
.IX Item "tv_interval ( $ref_to_gettimeofday [, $ref_to_later_gettimeofday] )"
Returns the floating seconds between the two times, which should have been 
returned by Time::HiRes::gettimeofday. If the second is omitted, then the
current time is use.
.IP "time" 4
.IX Item "time"
Returns a floating seconds since the epoch. This function can be exported,
resulting in a nice drop-in replacement for the \f(CW\*(C`time\*(C'\fR provided with perl,
see the \s-1EXAMPLES\s0 below.
.ie n .IP "sleep ( $floating_seconds )" 4
.el .IP "sleep ( \f(CW$floating_seconds\fR )" 4
.IX Item "sleep ( $floating_seconds )"
Converts \f(CW$floating_seconds\fR to microseconds and issues a usleep for the 
result.  This function can be exported, resulting in a nice drop-in 
replacement for the \f(CW\*(C`sleep\*(C'\fR provided with perl, see the \s-1EXAMPLES\s0 below.
.ie n .IP "alarm ( $floating_seconds [, $interval_floating_seconds ] )" 4
.el .IP "alarm ( \f(CW$floating_seconds\fR [, \f(CW$interval_floating_seconds\fR ] )" 4
.IX Item "alarm ( $floating_seconds [, $interval_floating_seconds ] )"
Converts \f(CW$floating_seconds\fR and \f(CW$interval_floating_seconds\fR and issues a
ualarm for the results.  \f(CW$interval_floating_seconds\fR is optional and will 
be 0 if unspecified, resulting in alarm-like behaviour.  This function can 
be exported, resulting in a nice drop-in 
replacement for the \f(CW\*(C`alarm\*(C'\fR provided with perl, see the \s-1EXAMPLES\s0 below.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&  use Time::HiRes;
\&
\&  $microseconds = 750_000;
\&  Time::HiRes::usleep ($microseconds);
\&
\&  # signal alarm in 2.5s & every .1 s thereafter
\&  Time::HiRes::ualarm (2_500_000, 100_000);     
\&
\&  # get seconds and microseconds since the epoch
\&  ($s, $usec) = Time::HiRes::gettimeofday;
\&
\&  # measure elapsed time 
\&  # (could also do by subtracting 2 Time::HiRes:gettimeofday_f return values)
\&  $t0 = [Time::HiRes::gettimeofday];
\&  # do bunch of stuff here
\&  $t1 = [Time::HiRes::gettimeofday];
\&  # do more stuff here
\&  $t0_t1 = Time::HiRes::tv_interval ($t0, $t1);
\&  
\&  $elapsed = Time::HiRes::tv_interval ($t0, [Time::HiRes::gettimeofday]);
\&  $elapsed = Time::HiRes::tv_interval ($t0);    # equivalent code
\&
\&  #
\&  # replacements for time, alarm and sleep that know about floating seconds
\&  #
\&  use Time::HiRes;
\&  $now_fractions = Time::HiRes::time;
\&  Time::HiRes::sleep (2.5);
\&  Time::HiRes::alarm (10.6666666);
\& 
\&  use Time::HiRes qw ( time alarm sleep );
\&  $now_fractions = time;
\&  sleep (2.5);
\&  alarm (10.6666666);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
D. Wegscheid <wegscd@whirlpool.com>
.SH "REVISION"
.IX Header "REVISION"
\&\f(CW$Id:\fR HiRes.pm,v 1.2 1996/12/30 13:28:40 wegscd Exp $
.PP
\&\f(CW$Log:\fR HiRes.pm,v $
Revision 1.2  1996/12/30 13:28:40  wegscd
Update documentation for what to do when missing \fIualarm()\fR and friends.
.PP
Revision 1.1  1996/10/17 20:53:31  wegscd
Fix =head1 being next to _\|_END_\|_ so pod2man works
.PP
Revision 1.0  1996/09/03 18:25:15  wegscd
Initial revision
.SH "MISSING \fIUALARM()\fP AND FRIENDS"
.IX Header "MISSING UALARM() AND FRIENDS"
If you have a system that does not have \fIualarm()\fR, \fIusleep()\fR, and
\&\fIgettimeofday()\fR, and you want to see this module work with it, you have
two options: modify the source code to work with your system, or get me
access to your system to do it (no promises about timeliness on this one!).
.PP
I have received mail from HP-UX, Linux, and Solaris users in this boat,
and it's hard for me to tell if it's a simple problem of not having
the correct libraries installed or if the routines are missing altogether.
.PP
If you make changes, let me know so they can be integrated back into the 
source so other users can benefit from your work. Thanks...
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996 Douglas E. Wegscheid.
All rights reserved. This program is free software; you can
redistribute it and/or modify it under the same terms as Perl itself.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 81:" 4
.IX Item "Around line 81:"
\&'=item' outside of any '=over'
.IP "Around line 121:" 4
.IX Item "Around line 121:"
You forgot a '=back' before '=head1'
